//-----------------------------------------------------------------------------------
// Sourse EL programmable controller V031
//-----------------------------------------------------------------------------------
#include "main.h"
//-----------------------------------------------------------------------------------
//u8 stat=0;
u16 CRC;
u8 Cycle=0;
u8 st_param=0;	// Sign to store parameters
//------------------------------------------------------------------------------
TController CV;
//-----------------------------------------------------------------------------------
in_flash u8	mdic[5][80]=
{
	"\n\r Loading default parameters...",				//0
	"\n\r Calibrating is highly needed!",				//1
	"\n\r Loading stored parameters...",				//2
	"\n\r"
	"\n\r EastLabs"
	"\n\r Programmable controller Ver1.1 22.02.2007"
	"\n\r",			 									//3	
	"\n\r Low power supply voltage detected (less 8V)",	//4
};
//-----------------------------------------------------------------------------------
void params_load()
{
	u8 i;
//	u16 DP_CRC;
//	__sprintf_P((u8*)outtxt,mdic[3]);	
//	while(1){con_handle();watchdog_reset();};	
	
	wtmp=CheckCRC(0);	
	fram_mem_read(PARAM_LOCATION+TPARAM_WIDTH-2,(u8*)&CRC,2);
//	__sprintf(outtxt,"\n\r ");WordToStr(outtxt,&wtmp,1);WordToStr(outtxt,&CRC,1);			
	if(CRC!=wtmp)
	{
		fram_mem_read(PARAM_LOCATION,(u8*)&CV.io,sizeof(CV.io));	
		fram_mem_read(PARAM_LOCATION+sizeof(io),(u8*)&pid[0],sizeof(pid));					
		fram_mem_read(PARAM_LOCATION+sizeof(io)+sizeof(pid),(u8*)&MenuRegs,sizeof(TMenuRegisters));			
		fram_mem_read(PARAM_LOCATION+sizeof(io)+sizeof(pid)+sizeof(TMenuRegisters),(u8*)&errors,sizeof(TErrors));					
	
	 	__sprintf_P((u8*)outtxt,mdic[0]);	
	 	__sprintf_P((u8*)outtxt,mdic[1]);	
		// Defaults
		memset(&io,0,sizeof(io));
		memset(&pid,0,sizeof(TPID_STRUCT));		
		memset(&MenuRegs,0,sizeof(TMenuRegisters));				
		memset(&errors,0,sizeof(TErrors));						
		// Default
		io.num_di=NUM_DIN;
		io.num_do=NUM_DOUT;
		io.num_ai=NUM_AIN;
		io.num_ao=NUM_AOUT;			
		for(i=0;i<NUM_AOUT;i++)
			io.ao_coff[i]=1;
//		for(i=0;i<NUM_AIN;i++)
//		{
//			io.ai_coff[i]=1;
//			io.ai_offset[i]=0;			
//		}
		for(i=0;i<NUM_PID;i++)
		{		
			pid[i].channel=0;
			pid[i].p=100;
			pid[i].d=500;
			pid[i].i=50;
			pid[i].t0=220+i;
			pid[i].power_min=0;
			pid[i].power=0;			
			pid[i].power_max=1000;
			pid[i].mode=1;
			pid[i].ti=30;		
			pid[i].t3max=155;
			pid[i].open=0;
			pid[i].close=0;					
			pid[i].p3=0;	
			pid[i].PID_POWER_STEP[0]=0.01;		// Slow
			pid[i].PID_POWER_STEP[1]=0.08;		// Fast
		}
		MenuRegs.password=1;
		memset(&MenuRegs.pass_user[0],0,sizeof(5));	
		memset(&MenuRegs.pass_admin[0],0,sizeof(5));	
//		memset(&MenuRegs.Time,0,sizeof(TTime));	
//		memset(&MenuRegs.Time_Summ,0,sizeof(TTime));	
//		memset(&MenuRegs.Time_Wint,0,sizeof(TTime));
//		MenuRegs.Season=1;	// Winter
		params_store();
	}
	else
	{
		fram_mem_read(PARAM_LOCATION,(u8*)&io,sizeof(io));
		fram_mem_read(PARAM_LOCATION+sizeof(io),(u8*)&pid[0],NUM_PID*sizeof(TPID));					
		fram_mem_read(PARAM_LOCATION+sizeof(io)+NUM_PID*sizeof(TPID),(u8*)&MenuRegs,sizeof(TMenuRegisters));			
		fram_mem_read(PARAM_LOCATION+sizeof(io)+NUM_PID*sizeof(TPID)+sizeof(TMenuRegisters),(u8*)&errors,sizeof(TErrors));					
		for(i=0;i<NUM_PID;i++)
		{		
			pid[i].power=0;			
			pid[i].open=0;
			pid[i].close=0;					
			pid[i].p3=0;						
		}
	 	__sprintf_P((u8*)outtxt,mdic[2]);	
	 }
}
//-----------------------------------------------------------------------------------
void params_store()
{
	fram_mem_enable();
	fram_mem_write(PARAM_LOCATION,(u8*)&io,sizeof(io));
	fram_mem_write(PARAM_LOCATION+sizeof(io),(u8*)&pid[0],NUM_PID*sizeof(TPID));	
	fram_mem_write(PARAM_LOCATION+sizeof(io)+NUM_PID*sizeof(TPID),(u8*)&MenuRegs,sizeof(TMenuRegisters));			
	fram_mem_write(PARAM_LOCATION+sizeof(io)+NUM_PID*sizeof(TPID)+sizeof(TMenuRegisters),(u8*)&errors,sizeof(TErrors));						
	CRC=CheckCRC(0);	
	fram_mem_write(PARAM_LOCATION+TPARAM_WIDTH-2,(u8*)&CRC,2);
	fram_mem_disable();	
}
//-----------------------------------------------------------------------------------
void init()
{
	hardware_init();
	Timer_Init();	
	con_init();
	upc_init();
	io_init();
	menu_init();	
	lcd_io_init();
	I2C_Init();
	watchdog_reset();
	adc_init();	
	Intr_Init();
	pid_init();
	error_init();
	params_load();	
	MenuRegs.lang=1;
	enable_interrupt();		
}
//-----------------------------------------------------------------------------------
void main(void)
{
	init();
 	__sprintf_P((u8*)outtxt,mdic[3]);	
	lcd_init();	
	//	Mod_Show_Full_Time();
	// Check program CRC
	Prog_Check();
	Intr_IRQ0_Start();// Make IO initialisation
	// Main cycle
	__sprintf((u8*)outtxt,"\n\r>");										
	SysSetUp=SYS_SET_UP_PERIOD;
	while(1)
	{
		watchdog_reset();
		if(FramTime==0)
		{
			FramTime=1000;
			fram_get_time();		
			MenuRegs.Time=ft;				
		}		
		Intr_Handle();					
		if(Adc_Time==0)
		{
			//Adc_Time=ADC_SAMPLES_TIME;
			Adc_Time=100;
			adc_handle();
		}
		io_handle();				
//		upc_TXHandler();		
		con_handle();		
		keys_menu();		
		if(LED_Time==0)
		{
			LED_Time=250;
			led_toggle();
		}
		if(st_param)
		{
			params_store();
			st_param=0;
		}
	}
}
//-----------------------------------------------------------------------------------

